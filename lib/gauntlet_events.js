// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Events;

  Events = (function() {
    function Events() {
      this.__events = {};
    }

    Events.prototype.listeners = function(event) {
      return Array.apply(this, this.__events[event] || []);
    };

    Events.prototype.trigger = function(event, a1, a2, a3, a4, a5) {
      var argument, argumentLength, callback, callbackLength, callbacks, i, _i, _j, _k, _len;
      if ((!this.__events) || (!this.__events[event])) {
        return false;
      }
      callbacks = this.__events[event];
      callback = callbacks[0];
      callbackLength = callbacks.length;
      argument = [];
      argumentLength = arguments.length;
      if (callbackLength === 1) {
        if (callback.__one) {
          this.off(event, callback);
        }
        switch (argumentLength) {
          case 1:
            callback.call(callback.__ctx || this);
            break;
          case 2:
            callback.call(callback.__ctx || this, a1);
            break;
          case 3:
            callback.call(callback.__ctx || this, a1, a2);
            break;
          case 4:
            callback.call(callback.__ctx || this, a1, a2, a3);
            break;
          case 5:
            callback.call(callback.__ctx || this, a1, a2, a3, a4);
            break;
          case 6:
            callback.call(callback.__ctx || this, a1, a2, a3, a4, a5);
            break;
          default:
            for (i = _i = 1; 1 <= argumentLength ? _i < argumentLength : _i > argumentLength; i = 1 <= argumentLength ? ++_i : --_i) {
              argument[i - 1] = arguments[i];
            }
            callback.apply(callback.__ctx || this, argument);
        }
      } else {
        for (i = _j = 1; 1 <= argumentLength ? _j < argumentLength : _j > argumentLength; i = 1 <= argumentLength ? ++_j : --_j) {
          argument[i - 1] = arguments[i];
        }
        for (_k = 0, _len = callbacks.length; _k < _len; _k++) {
          callback = callbacks[_k];
          if (callback.__one) {
            this.off(event, callback);
          }
          callback.apply(callback.__ctx || this, argument);
        }
      }
      return true;
    };

    Events.prototype.on = function(event, callback, context) {
      if (!this.__events) {
        this.__events = {};
      }
      if (!this.__events[event]) {
        this.__events[event] = [];
      }
      callback.__ctx = context;
      this.__events[event].push(callback);
      return this;
    };

    Events.prototype.once = function(event, callback, context) {
      callback.__one = true;
      return this.on(event, callback, context);
    };

    Events.prototype.off = function(event, callback, context) {
      var events, __callback, _i, _len, _ref;
      if (!this.__events) {
        return this;
      }
      if (callback) {
        if (!this.__events[event]) {
          return this;
        }
        events = [];
        _ref = this.__events[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          __callback = _ref[_i];
          if (__callback) {
            if (__callback !== callback || __callback.__ctx !== context) {
              events.push(__callback);
            }
          }
        }
        this.__events[event] = events.length ? events : null;
      } else {
        if (event) {
          this.__events[event] = null;
        } else {
          this.__events = {};
        }
      }
      return this;
    };

    return Events;

  })();

  module.exports = Events;

}).call(this);
